<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="Century_MIS.IconOptions.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        /4bH+xd5boehrhI1owAAAABJRU5ErkJggg==
</value>
  </data>
</root>